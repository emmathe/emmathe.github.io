<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>amy acker blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-02-16T19:10:31.026Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>amy acker</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCP 三次握手 四次挥手</title>
    <link href="http://yoursite.com/2021/02/17/TCP%20%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%20%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://yoursite.com/2021/02/17/TCP 三次握手 四次挥手/</id>
    <published>2021-02-17T15:59:36.000Z</published>
    <updated>2021-02-16T19:10:31.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>TCP 三次握手 四次挥手</p><a id="more"></a><h2 id="TCP的连接和建立"><a href="#TCP的连接和建立" class="headerlink" title="TCP的连接和建立"></a>TCP的连接和建立</h2><p>TCP的连接和建立主要关注报文中的几个字段</p><table><thead><tr><th>字段</th><th>长度(bit)</th><th>含义</th></tr></thead><tbody><tr><td>序号</td><td>32</td><td>TCP链接中传输的数据流中每个字节都编上一个序号。序号字段的值指的是本报文段所发送的数据的第一个字节的序号。</td></tr><tr><td>确认号</td><td>32</td><td>是期望收到对方的下一个报文段的数据的第1个字节的序号，即上次已成功接收到的数据字节序号加1。只有ACK标识为1，此字段有效。</td></tr><tr><td>ACK</td><td>1</td><td>确认号有效标识。只有当ACK=1时确认号字段才有效。当ACK=0时，确认号无效。</td></tr><tr><td>SYN</td><td>1</td><td>同步序号标识，用来发起一个连接。SYN=1表示这是一个连接请求或连接接受请求。</td></tr><tr><td>FIN</td><td>1</td><td>发端完成发送任务标识。用来释放一个连接。FIN=1表明此报文段的发送端的数据已经发送完毕，并要求释放连接。</td></tr></tbody></table><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>TCP/IP采用三次握手来建立连接<br><img src="https://img-blog.csdnimg.cn/20210216164515717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FteWFja2Vy,size_16,color_FFFFFF,t_70#pic_center" alt="三次握手"></p><table><thead><tr><th>过程</th><th>报文</th><th>含义</th></tr></thead><tbody><tr><td>第一次握手</td><td>SYN = 1, seq = x</td><td>Client向Server发送一个连接请求 SYN = 1(表示这个报文是一个连接请求)，同时发送自己的序号seq = x</td></tr><tr><td>第二次握手</td><td>SYN = 1, ACK = 1, ack = x + 1, seq = y</td><td>收到Client发来的报文，回复Client一个确认报文作为应答 ACK = 1(确认报文)，接着发送一个确认号ack = x + 1(+1是代表它收到了SYN标识)，SYN = 1（代表连接接受请求），同时发送自己的序号seq = y</td></tr><tr><td>第三次握手</td><td>ACK = 1, ack = y + 1</td><td>Client收到Server的响应报文，它也要回复确认报文 ACK = 1(代表确认报文)，ack = Y + 1(对方的序号+1，表示收到对方的SYN标识)</td></tr></tbody></table><p><strong>注</strong>：为啥要3次握手<br>前两次握手 客户端可以知道服务器可以收到报文，也可以发送给我，但是服务器并不知道客户端能否收到，所有需要三次握手，即客户端再发送一个确认报文</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>TCP/IP采用四次挥手来关闭连接<br><img src="https://img-blog.csdnimg.cn/20210216170017448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FteWFja2Vy,size_16,color_FFFFFF,t_70#pic_center" alt="四次挥手"></p><table><thead><tr><th>过程</th><th>报文</th><th>含义</th></tr></thead><tbody><tr><td>第一次挥手</td><td>FIN = 1, seq = x</td><td>Client发送一个FIN = 1的包(代表要释放连接)，同时发送自己的序号 seq = x</td></tr><tr><td>第二次挥手</td><td>ACK = 1, ack = x + 1</td><td>Server收到Client的FIN包，则发送一个确认包，表示自己接受到Client的关闭连接请求（还没准备好关闭连接）</td></tr><tr><td>第三次挥手</td><td>FIN = 1, seq = y</td><td>当Server准备好关闭连接时，向Client发送结束连接请求，FIN置为1，同时发送自己的序号seq = y</td></tr><tr><td>第四次挥手</td><td>ACK = 1, ack = y + 1</td><td>Client接收到Server的关闭请求，发送一个确认包，Server收到确认包，就会关闭连接，进入CLOSED状态，Server关闭后，将不再回应Client，Client等待某个时间后，将会自行关闭，进入CLOSED状态，这时完成TCP连接释放</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;TCP 三次握手 四次挥手&lt;/p&gt;
    
    </summary>
    
      <category term="网络编程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>TCP报文格式</title>
    <link href="http://yoursite.com/2021/02/17/TCP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/02/17/TCP报文格式/</id>
    <published>2021-02-17T15:59:36.000Z</published>
    <updated>2021-02-16T19:04:49.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>TCP报文格式</p><a id="more"></a><h2 id="IP数据报"><a href="#IP数据报" class="headerlink" title="IP数据报"></a>IP数据报</h2><p>TCP/IP协议定义了一个在因特网上传输的包，称为IP数据报，由首部和数据两部分组成。IP报头中包含大量的信息，如源IP地址丶目的IP地址丶IP版本号丶数据报长度等。数据部分保存着传输层的数据丶如TCP丶UDP丶ICMP等数据</p><p>组成如下：<br><img src="https://img-blog.csdnimg.cn/20210216002105666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FteWFja2Vy,size_16,color_FFFFFF,t_70#pic_center" alt="IP数据报"></p><h2 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h2><p>其依然由首部和数据部分组成<br><img src="https://img-blog.csdnimg.cn/20210216002432349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FteWFja2Vy,size_16,color_FFFFFF,t_70#pic_center" alt="TCP报文"></p><table><thead><tr><th>字段</th><th>长度(bit)</th><th>含义</th></tr></thead><tbody><tr><td>源端口</td><td>16</td><td>标识哪个应用程序发送。</td></tr><tr><td>目的端口</td><td>16</td><td>标识哪个应用程序接收。</td></tr><tr><td>序号</td><td>32</td><td>TCP链接中传输的数据流中每个字节都编上一个序号。序号字段的值指的是本报文段所发送的数据的第一个字节的序号。</td></tr><tr><td>确认号</td><td>32</td><td>是期望收到对方的下一个报文段的数据的第1个字节的序号，即上次已成功接收到的数据字节序号加1。只有ACK标识为1，此字段有效。</td></tr><tr><td>数据偏移</td><td>4</td><td>即首部长度，指出TCP报文段的数据起始处距离TCP报文段的起始处有多远，以32比特（4字节）为计算单位。最多有60字节的首部，若无选项字段，正常为20字节。</td></tr><tr><td>保留</td><td>6</td><td>暂时可忽略，值必须填0。</td></tr><tr><td>URG</td><td>1</td><td>紧急指针有效标识。它告诉系统此报文段中有紧急数据，应尽快传送（相当于高优先级的数据）。</td></tr><tr><td>ACK</td><td>1</td><td>确认号有效标识。只有当ACK=1时确认号字段才有效。当ACK=0时，确认号无效。</td></tr><tr><td>PSH</td><td>1</td><td>标识接收方应该尽快将这个报文段交给应用层。接收到PSH = 1的TCP报文段，应尽快的交付接收应用进程，而不再等待整个缓存都填满了后再向上交付。</td></tr><tr><td>PST</td><td>1</td><td>重建连接标识。当RST=1时，表明TCP连接中出现严重错误（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立连接。</td></tr><tr><td>SYN</td><td>1</td><td>同步序号标识，用来发起一个连接。SYN=1表示这是一个连接请求或连接接受请求。</td></tr><tr><td>FIN</td><td>1</td><td>发端完成发送任务标识。用来释放一个连接。FIN=1表明此报文段的发送端的数据已经发送完毕，并要求释放连接。</td></tr><tr><td>窗口</td><td>16</td><td>TCP的流量控制，窗口起始于确认序号字段指明的值，这个值是接收端正期望接收的字节数。窗口最大为65535字节。</td></tr><tr><td>校验和</td><td>16</td><td>包括TCP首部和TCP数据，是一个强制性的字段，一定是由发端计算和存储，并由收端进行验证。在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。</td></tr><tr><td>紧急指针</td><td>16</td><td>只有当URG标志置1时紧急指针才有效。TCP的紧急方式是发送端向另一端发送紧急数据的一种方式。紧急指针指出在本报文段中紧急数据共有多少个字节（紧急数据放在本报文段数据的最前面）。</td></tr><tr><td>选项</td><td>可变</td><td>又称为MSS。每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。</td></tr><tr><td>填充</td><td>可变</td><td>选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。</td></tr><tr><td>数据部分</td><td>可变</td><td>该TCP协议包负载的数据</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;TCP报文格式&lt;/p&gt;
    
    </summary>
    
      <category term="网络编程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 对象</title>
    <link href="http://yoursite.com/2020/01/13/Java%20%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2020/01/13/Java 对象/</id>
    <published>2020-01-13T15:36:30.000Z</published>
    <updated>2021-02-19T14:37:59.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java对象的探秘</p><a id="more"></a><h2 id="1丶对象的创建"><a href="#1丶对象的创建" class="headerlink" title="1丶对象的创建"></a>1丶对象的创建</h2><p><img src="https://img-blog.csdnimg.cn/20210219111702420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FteWFja2Vy,size_16,color_FFFFFF,t_70#pic_center" alt="对象的创建过程"></p><h3 id="new指令和类加载检查"><a href="#new指令和类加载检查" class="headerlink" title="new指令和类加载检查"></a>new指令和类加载检查</h3><p>当虚拟机遇到一个new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载丶解析和初始化过。如果没有，那么必须先执行相应的类加载过程。</p><h3 id="分配内存"><a href="#分配内存" class="headerlink" title="分配内存"></a>分配内存</h3><p>在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确定，为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。</p><h4 id="1丶分配方式："><a href="#1丶分配方式：" class="headerlink" title="1丶分配方式："></a>1丶分配方式：</h4><ul><li><strong>指针碰撞</strong>：假设Java堆中内存是绝对规整的，所有用过的内存都放一边，空闲的内存放别外一边，中间放着一个指针作为分界点的指示器，那所分配的内存就仅仅是把指针向空闲空间那边挪动一段对对象大小相等的距离，这个分配方式称为“指针碰撞”。</li><li><strong>空闲列表</strong>：如果Java堆中的内存不是规整的，已使用内存与空闲内存相互交错，那就没办法进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表”。</li></ul><p>选择哪种分配方式是由Java堆是否规整决定的，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定的。</p><h4 id="2丶并发问题："><a href="#2丶并发问题：" class="headerlink" title="2丶并发问题："></a>2丶并发问题：</h4><p>在并发情况且不是线程安全的的情况下，可能出现出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用原来的指针来分配内存。解决这个问题有两种方案，</p><p><strong>解决方案</strong>：</p><ul><li><strong>CAS配上失败重试的方法</strong>：一种是对分配内存空间的动作进行同步处理——实际上虚拟机采用CAS配上失败重试的方式保证更新操作的原子性。<ul><li><strong>TLAB</strong>：一种是把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（TLAB）。哪个线程要分配内存，就在哪个线程的TLAB上分配，只有TLAB用完并分配新的TLAB时，才需要同步锁定。</li></ul></li></ul><h3 id="内存空间初始化"><a href="#内存空间初始化" class="headerlink" title="内存空间初始化"></a>内存空间初始化</h3><p>分配内存完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p><h3 id="设置对象头"><a href="#设置对象头" class="headerlink" title="设置对象头"></a>设置对象头</h3><p>接下来，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例丶如何才能找到类的元数据信息丶对象的哈希码丶对象的GC分代年龄等信息。这些信息存在对象的对象头之中。</p><h3 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a>执行<init>方法</init></h3><p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从Java程序的视角来看，对象创建才刚刚开始——<init>方法还没执行，所有的字段都还为零。所以一般来说执行new指令之后会接着执行<init>方法，这样一个真正可用的对象才算完成产生出来。</init></init></p><h2 id="2丶对象的内存布局"><a href="#2丶对象的内存布局" class="headerlink" title="2丶对象的内存布局"></a>2丶对象的内存布局</h2><p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头丶实例数据丶对齐填充。</p><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p>非数组对象的对象头包括两部分信息：Mark Word，类型指针。数组对象的对象头还必须要有一块用于记录数组长度的数据。</p><table><thead><tr><th>长度</th><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>32bit/64bit</td><td>Mark Word</td><td>哈希码丶GC分代年龄丶锁状态标志等</td></tr><tr><td>32bit/64bit</td><td>类型指针</td><td>即对象指向它的类元数据的指针</td></tr><tr><td>32bit/32bit</td><td>数组长度</td><td>记录数组的长度</td></tr></tbody></table><h4 id="1丶Mark-Word"><a href="#1丶Mark-Word" class="headerlink" title="1丶Mark Word"></a>1丶Mark Word</h4><p>对象头包括两部分信息，第一部分用于存储对象自身的运行是数据，如哈希码丶GC分代年龄丶锁状态标志丶线程持有的锁丶偏向线程ID丶偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为“Mark Word”。对象需要存储的运行时数据很多，其实已经超出了32位丶64位Bitmap结构所能记录的限度，但是对象头信息是与对象自身定义的数据无关的额外存储成本，考虑到虚拟机的空间效率，Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的信息，它会根据对象的状态复用自己的存储空间。</p><p><strong>32位虚拟机</strong><br>markOop.hpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//  32 bits:</span><br><span class="line">//  --------</span><br><span class="line">//             hash:25 ------------&gt;| age:4    biased_lock:1 lock:2 (normal object)</span><br><span class="line">//             JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)</span><br><span class="line">//             size:32 ------------------------------------------&gt;| (CMS free block)</span><br><span class="line">//             PromotedObject*:29 ----------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span><br></pre></td></tr></table></figure><p>在运行期间，随着锁标志位的变化，Mark Word可以变化成以下几种类型的数据：<br><img src="https://img-blog.csdnimg.cn/20210218005123591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FteWFja2Vy,size_16,color_FFFFFF,t_70#pic_center" alt="32位虚拟机"><br><strong>64位虚拟机</strong><br>markOop.hpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//  64 bits:</span><br><span class="line">//  --------</span><br><span class="line">//  unused:25 hash:31 --&gt;| unused:1   age:4    biased_lock:1 lock:2 (normal object)</span><br><span class="line">//  JavaThread*:54 epoch:2 unused:1   age:4    biased_lock:1 lock:2 (biased object)</span><br><span class="line">//  PromotedObject*:61 ---------------------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span><br><span class="line">//  size:64 -----------------------------------------------------&gt;| (CMS free block)</span><br></pre></td></tr></table></figure><p>在运行期间，随着锁标志位的变化，Mark Word可以变化成以下几种类型的数据：<br><img src="https://img-blog.csdnimg.cn/2021021800514977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FteWFja2Vy,size_16,color_FFFFFF,t_70#pic_center" alt="64位虚拟机"></p><h4 id="2丶类型指针"><a href="#2丶类型指针" class="headerlink" title="2丶类型指针"></a>2丶类型指针</h4><p>对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><h4 id="3丶数组长度"><a href="#3丶数组长度" class="headerlink" title="3丶数组长度"></a>3丶数组长度</h4><p>如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中却无法确定数组的大小。</p><h3 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h3><p>接下来的实例数据部分是对象真正存储的有效信息，也是程序代码中所定义的各种类型的字段内容。无论是从父类继承下来的，还是子类中定义的，都需要记录到实例数据中。这部分的存储顺序会受到虚拟机分配策略参数和字段在Java源码中定义顺序的影响。</p><h3 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h3><p>第三部分对齐填充并不是必然存在的，它仅仅起着占位符的作用，由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，也就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数，因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p><h2 id="3丶对象的访问定位"><a href="#3丶对象的访问定位" class="headerlink" title="3丶对象的访问定位"></a>3丶对象的访问定位</h2><p>建立对象是为了使用对象，Java程序需要通过栈上的reference数据来操作堆上的具体对象。</p><p>由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去定位丶访问堆中的对象的具体位置，所以对象访问方式取决于虚拟机实现而定的。目前主流的访问方式有使用句柄和直接指针两种。</p><h3 id="句柄方式："><a href="#句柄方式：" class="headerlink" title="句柄方式："></a>句柄方式：</h3><p>Java堆中将会划分出一块来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象的实例数据与类型数据各自的具体地址。</p><p><strong>通过句柄访问对象</strong><br><img src="https://img-blog.csdnimg.cn/20210217021406842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FteWFja2Vy,size_16,color_FFFFFF,t_70#pic_center" alt="通过句柄访问对象"></p><h3 id="直接指针方式："><a href="#直接指针方式：" class="headerlink" title="直接指针方式："></a>直接指针方式：</h3><p>Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象地址。</p><p><strong>通过直接指针访问对象</strong><br><img src="https://img-blog.csdnimg.cn/20210217021521209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FteWFja2Vy,size_16,color_FFFFFF,t_70#pic_center" alt="通过直接指针访问对象"></p><h3 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h3><p>使用句柄来访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据的指针，而reference本身不需要修改。</p><p>使用直接指针访问方式最大的好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。Sun HotSpot使用第二种方式进行对象访问，但是从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。</p><p>参考文献：《Java虚拟机规范》丶《深入理解Java虚拟机》</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Java对象的探秘&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java 内存模型与线程</title>
    <link href="http://yoursite.com/2020/01/12/Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/01/12/Java 内存模型与线程/</id>
    <published>2020-01-12T15:59:36.000Z</published>
    <updated>2021-02-16T17:36:30.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java内存模型与线程</p><a id="more"></a><h1 id="Java内存模型与线程"><a href="#Java内存模型与线程" class="headerlink" title="Java内存模型与线程"></a>Java内存模型与线程</h1><h2 id="1丶硬件的效率与一致性"><a href="#1丶硬件的效率与一致性" class="headerlink" title="1丶硬件的效率与一致性"></a>1丶硬件的效率与一致性</h2><p>由于计算机的存储设备与处理器的运算速度有几个数量级的差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器的运算速度的高速缓存（Cache）来作为内存与处理器之间的缓冲：将运算需要使用到的数据复杂到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存之中，这样处理器就无须等待缓慢的内存读写了。</p><p>基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但是也为计算机系统带来更高的复杂度，因为它引入了一个新的问题：缓存一致性。在多处理器系统中，每个处理器都有自己的高速缓存，而他们又共享同一主内存，当多个处理器的运算任务都涉及到同一块主内存区域时，将可能导致各自的缓存数据不一致。为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有MSI丶MESI丶MOSI丶Synapse丶Firefly等。</p><p><strong>处理器丶高速缓存丶主内存间的交互关系</strong><br><img src="https://img-blog.csdnimg.cn/20210217010309611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FteWFja2Vy,size_16,color_FFFFFF,t_70#pic_center" alt="处理器丶高速缓存丶主内存间的交互关系"></p><p>除了增加高速缓存之外，为了使得处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行（Out-Of-Order Execution）优化，处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果一致的，但并不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致，因此，如果存在一个计算任务依赖别外一个计算任务的中间结果，那么其顺序性并不能靠代码的先后顺序来保证。与处理器的乱序执行优化类似，Java虚拟机的即时编译器中也有类似的指令重排序（Instrucion Reorder）优化。</p><h2 id="2丶Java的内存模型"><a href="#2丶Java的内存模型" class="headerlink" title="2丶Java的内存模型"></a>2丶Java的内存模型</h2><p>Java虚拟机规范中试图定义一种Java内存模型（JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。</p><h3 id="2-1丶主内存与工作内存"><a href="#2-1丶主内存与工作内存" class="headerlink" title="2.1丶主内存与工作内存"></a>2.1丶主内存与工作内存</h3><p>Java内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。此处的变量与Java编程中所说的变量有所区别，它包括实例字段丶静态字段和构成数组对象的元素，但不包括局部变量与方法参数，因为后者是线程私有的，不会被共享，自然就不会存在竞争问题。</p><p>Java内存模型规定了所有的变量都存储在主内存中（此处的主内存与物理硬件时的主内存名字一样，两者也可以互相类比，但此处近视虚拟机内存的一部分）。每条线程还有自己的工作内存（可与前面说的处理器高速缓存类比），线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作（读取丶赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同线程之间也无法直接访问对方的工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。</p><p>这里所说的主内存丶工作内存与Java内存区域中的Java堆丶栈丶方法去等并不是统一层次的内存划分，两者基本上是没有关系的，如果两者一定要勉强对应起来，那从变量丶主内存丶工作内存的定义来看，主内存主要对应与Java堆中的对象实例数据部分，而工作内存则对应于虚拟机栈中的部分区域。从更低层次上说，主内存就直接对应于物理硬件的内存，而为了获取更好的运行速度，虚拟机可能会让工作内存优先存储于寄存器和高速缓存中，因为程序运行是主要访问读写的是工作内存。</p><p><strong>Java线程丶工作内存丶主内存间的交互关系</strong><br><img src="https://img-blog.csdnimg.cn/2021021701035735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FteWFja2Vy,size_16,color_FFFFFF,t_70#pic_center" alt="Java线程丶工作内存丶主内存间的交互关系"></p><h3 id="2-2丶内存间交互操作"><a href="#2-2丶内存间交互操作" class="headerlink" title="2.2丶内存间交互操作"></a>2.2丶内存间交互操作</h3><p>关于主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存丶如何从工作内存同步回主内存之类的实现细节，Java内存模型中定义了以下8种操作来完成，虚拟机实现时必须保证下面提及的每一种操作都是原子的丶不可再分的。</p><ul><li><strong>lock</strong>(锁定)：作用于主内存的变量，它把一个变量标记为一条线程独占的状态。</li><li><strong>unlock</strong>(解锁)：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li><strong>read</strong>(读取)：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。</li><li><strong>load</strong>(载入)：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li><strong>use</strong>(使用)：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时执行这个操作。</li><li><strong>assign</strong>(赋值)：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li><strong>store</strong>(存储)：作用于工作内存的变量，它把工作内存中一个变量的值传递到主内存中，以便随后的write操作使用。</li><li><strong>write</strong>(写入)：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放到主内存的变量中。</li></ul><p> <strong>注</strong>：Java内存模型还规定了在执行这8种基本操作时要满足某些规则，后续再提</p><p>参考文献：《Java虚拟机规范》丶《深入理解Java虚拟机》</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Java内存模型与线程&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java 垃圾收集算法</title>
    <link href="http://yoursite.com/2020/01/08/Java%20%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2020/01/08/Java 垃圾收集算法/</id>
    <published>2020-01-08T15:01:58.000Z</published>
    <updated>2020-01-12T16:11:28.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java GC 垃圾收集算法 </p><a id="more"></a><h2 id="判断对象是否存活"><a href="#判断对象是否存活" class="headerlink" title="判断对象是否存活"></a>判断对象是否存活</h2><h3 id="1丶引用计数算法"><a href="#1丶引用计数算法" class="headerlink" title="1丶引用计数算法"></a>1丶引用计数算法</h3><p>引用计数算法的基本思路是就是给对象添加一个引用计数器，每当一个地方引用它时，计数器的值就加1；但引用失效时，计数器的值就减一；任何时刻计数器为0的对象就是不可能再被使用的。</p><p>缺点：引用计数算法它很难解决对象之间互相循环引用的问题。</p><h3 id="2丶可达性分析算法"><a href="#2丶可达性分析算法" class="headerlink" title="2丶可达性分析算法"></a>2丶可达性分析算法</h3><p>可达性分析算法的基本思路就是通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。</p><p>即使是不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段，要真正宣告一个对象的死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过了，虚拟机将这两种情况都视为“没有必要执行”。</p><p>如果这个对象被判定为有必要执行finalize()方法，那么这个对象将会放置到一个叫做F-Queue的队列中，并稍后由虚拟机自动建立的丶低优先级的Finalizer线程去执行它。这里的“执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是，如果一个对象在finalize()方法中执行缓慢，或者发生了死循环，将可能会导致F-Queue队列中其他对象永久对于等待，甚至导致整个内存回收系统奔溃。finalize()方法是对象逃脱死亡的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果这时对象和引用链上的任何对象建立关联，那么它将会被移除出“即将回收”的集合；如果这时对象没有和引用链相连的话，那么它就真的被回收了。</p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="1丶标记-清除算法"><a href="#1丶标记-清除算法" class="headerlink" title="1丶标记-清除算法"></a>1丶标记-清除算法</h3><p>标记-清除算法是收集算法中最基础的算法，算法分为“标记”和“清除”两个阶段：首先标记处所有需要回收的对象，在标记完成后统一回收所有被标记的对象，之所以说它是最基础的收集算法，是因为后续的收集算法都是基于这个思路进行改进的。它的缺点是：一个是效率问题，标记和清除两个过程的效率都不高；别一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发别一次的垃圾收集动作。</p><h3 id="2丶复制算法"><a href="#2丶复制算法" class="headerlink" title="2丶复制算法"></a>2丶复制算法</h3><p>复制收集算法是为了解决效率问题，所产生的，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这块内存用完了，就将还存活着的对象复制到别外一块上面，然后在把已使用过的内存空间一次清理掉。这样使得每次都是对着整个半区进行内存回收，内存分配是也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。缺点是将内存缩小为了原来的一半，代价未免太高了。</p><h3 id="3丶标记-整理算法"><a href="#3丶标记-整理算法" class="headerlink" title="3丶标记-整理算法"></a>3丶标记-整理算法</h3><p>复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都是100%存活的极端情况，所以在老年代一般不能直接选用这种算法。</p><p>根据老年代的特点，有人提出了别外一种“标记-整理”算法，标记的过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><h3 id="4丶分代收集算法"><a href="#4丶分代收集算法" class="headerlink" title="4丶分代收集算法"></a>4丶分代收集算法</h3><p>分代收集算法，根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适合的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高，没有额外空间怼它进行分配担保，就必须使用“标记-清除”或者“标记-整理”算法来进行回收。</p><h2 id="方法区的回收"><a href="#方法区的回收" class="headerlink" title="方法区的回收"></a>方法区的回收</h2><p>待续</p><p>参考文献：《Java虚拟机规范》丶《深入理解Java虚拟机》</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Java GC 垃圾收集算法 &lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java 内存区域</title>
    <link href="http://yoursite.com/2020/01/07/Java%20%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
    <id>http://yoursite.com/2020/01/07/Java 内存区域/</id>
    <published>2020-01-07T15:01:58.000Z</published>
    <updated>2021-02-16T17:52:35.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，根据《Java虚拟机规范》的规定，Java虚拟机所管理的内存将包括以下几个运行时数据区域。</p><p><strong>Java虚拟机运行时数据区</strong><br><img src="https://img-blog.csdnimg.cn/20210217015038278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FteWFja2Vy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="1丶程序计数器"><a href="#1丶程序计数器" class="headerlink" title="1丶程序计数器"></a>1丶程序计数器</h2><p>程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支丶循环丶跳转丶异常处理丶线程恢复等基础功能都需要依赖计数器来完成。</p><p>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何时刻，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立地程序计数器，各条线程之间计数器互不影响，独立储存，所以这块内存区域是线程私有的。</p><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器的值则为空。此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p><h2 id="2丶Java虚拟机栈"><a href="#2丶Java虚拟机栈" class="headerlink" title="2丶Java虚拟机栈"></a>2丶Java虚拟机栈</h2><p>和程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同。它描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于存储局部变量表丶操作数栈丶动态链接丶方法出口等信息。每个方法从调用到执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p>局部变量表存放了编译器可知的各种基本数据类型丶对象引用（reference类型）和returnAddress类型</p><p>其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p><p>该区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p><h2 id="3丶本地方法栈"><a href="#3丶本地方法栈" class="headerlink" title="3丶本地方法栈"></a>3丶本地方法栈</h2><p>本地方法栈与虚拟机栈所发挥的作用是非常相似的，它们之间的区别是虚拟机栈为虚拟机执行Java方法（字节码）服务，而本地方法栈则为虚拟机执行使用到的Native方法服务，和虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。</p><h2 id="4丶Java堆"><a href="#4丶Java堆" class="headerlink" title="4丶Java堆"></a>4丶Java堆</h2><p>Java堆是Java虚拟机所管理的内存中最大的一块。Java堆是线程共享的内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p><p>Java堆是垃圾收集器管理的主要区域，从内存回收的角度来看，由于现在收集器基本都是采用分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致点有Eden（伊甸园）空间丶From Survivor空间丶To Survivor空间等。从内存分配的角度来看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区，无论怎么划分，存储的都是对象实例，划分的目的是为了更好地回收内存，或者更快的分配内存。</p><p>Java虚拟机规范的规定中，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。如果在堆中没有内存完成实例分配，并且堆无法在扩展时，就会抛出OutOfMemoryError异常。</p><h2 id="5丶方法区"><a href="#5丶方法区" class="headerlink" title="5丶方法区"></a>5丶方法区</h2><p>方法去与Java堆一样，是线程共享的内存区域，它用于存储已被虚拟机加载的类信息丶常量丶静态变量丶即时编译器后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</p><p>由于早期HotSpot JVM的把GC分代收集扩展至方法区，因此很多人将方法去称为“永久代”。在JDK1.8中废弃永久代替换成元空间。</p><p>Java虚拟机规范对方法区的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在。这区域的内存回收目标主要是针对常量池的回收和对类型的卸载，虽然回收的成绩难以令人满意，类型的卸载，条件相当苛刻，但是这部分区域的回收确实的必要的。</p><p>Java虚拟机规范的规定中，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</p><h2 id="6丶运行时常量池"><a href="#6丶运行时常量池" class="headerlink" title="6丶运行时常量池"></a>6丶运行时常量池</h2><p>运行时常量池是方法区的一部分。Class文件中除了有类的版本丶字段丶方法丶接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p><p>Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中。（如String类的intern()方法）。</p><p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法在申请到内存时会抛出OutOfMemoryError异常。</p><h2 id="7丶直接内存"><a href="#7丶直接内存" class="headerlink" title="7丶直接内存"></a>7丶直接内存</h2><p>直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。但是这部分内存也被频繁使用，而且也可能导致OutOfMemoryError异常。</p><p>在JDK 1.4中新加入了NIO类，引入了一种基于通道与缓冲区的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p><p>显然，本机直接内存的分配不会受到Java堆大小的限制，但是。既然是内存，肯定还是会受到本机总内存的限制。。在配置虚拟机参数时，会根据实际内存设置-Xmx等参数，如果忽略直接内存的话，使得各个内存区域总和大于物理内存限制，从而导致动态扩展时出现OutOfMemoryError异常。</p><p>参考文献：《Java虚拟机规范》丶《深入理解Java虚拟机》</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，根据《Java虚拟机规范》的规定，Java虚拟机所管理的内存将包括以下几个运行时数据区域。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java虚拟机运行时数据区&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20210217015038278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FteWFja2Vy,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>java.util.Random的源码阅读</title>
    <link href="http://yoursite.com/2020/01/06/java.util.Random%E7%9A%84%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://yoursite.com/2020/01/06/java.util.Random的源码阅读/</id>
    <published>2020-01-06T15:01:58.000Z</published>
    <updated>2020-01-06T16:41:11.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>java.util.Random的源码阅读</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>java.util.Random是Java的一个实用工具类库中的一个类，提供了产生各种类型随机数的方法</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Random</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 生成种子 seedUniquifier方法和System.nanoTime()时间进行 异或运算</span></span><br><span class="line">    <span class="keyword">this</span>(seedUniquifier() ^ System.nanoTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始的种子</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong seedUniquifier = <span class="keyword">new</span> AtomicLong(<span class="number">8682522807148012L</span>);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">seedUniquifier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 多线程可以会赋值失败，所以使用for循环</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 当前预期值</span></span><br><span class="line">        <span class="keyword">long</span> current = seedUniquifier.get();</span><br><span class="line">        <span class="comment">// 要更新的值</span></span><br><span class="line">        <span class="keyword">long</span> next = current * <span class="number">181783497276652981L</span>;</span><br><span class="line">        <span class="comment">// 使用CAS操作更新seedUniquifier</span></span><br><span class="line">        <span class="keyword">if</span> (seedUniquifier.compareAndSet(current, next))</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicLong seed;</span><br><span class="line"><span class="comment">// 有参构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Random</span><span class="params">(<span class="keyword">long</span> seed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getClass() == Random.class)</span><br><span class="line">        <span class="keyword">this</span>.seed = <span class="keyword">new</span> AtomicLong(initialScramble(seed));</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 子类可以重写setSeed()方法 </span></span><br><span class="line">        <span class="keyword">this</span>.seed = <span class="keyword">new</span> AtomicLong();</span><br><span class="line">        setSeed(seed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> multiplier = <span class="number">0x5DEECE66DL</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> mask = (<span class="number">1L</span> &lt;&lt; <span class="number">48</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把用户设置的种子进行运算 返回long</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">initialScramble</span><span class="params">(<span class="keyword">long</span> seed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (seed ^ multiplier) &amp; mask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeed</span><span class="params">(<span class="keyword">long</span> seed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.seed.set(initialScramble(seed));</span><br><span class="line">    haveNextNextGaussian = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">(<span class="keyword">int</span> bound)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断 bound</span></span><br><span class="line">    <span class="keyword">if</span> (bound &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(BadBound);</span><br><span class="line">    <span class="comment">// 根据旧种子生成新种子</span></span><br><span class="line">    <span class="keyword">int</span> r = next(<span class="number">31</span>);</span><br><span class="line">    <span class="comment">// 下面这些代码都是根据新种子计算随机数</span></span><br><span class="line">    <span class="keyword">int</span> m = bound - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ((bound &amp; m) == <span class="number">0</span>) </span><br><span class="line">        r = (<span class="keyword">int</span>)((bound * (<span class="keyword">long</span>)r) &gt;&gt; <span class="number">31</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = r;</span><br><span class="line">            u - (r = u % bound) + m &lt; <span class="number">0</span>;</span><br><span class="line">            u = next(<span class="number">31</span>))</span><br><span class="line">            ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> bits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> oldseed, nextseed;</span><br><span class="line">    AtomicLong seed = <span class="keyword">this</span>.seed;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 获取旧种子</span></span><br><span class="line">        oldseed = seed.get();</span><br><span class="line">        <span class="comment">// 用旧种子去生成新种子</span></span><br><span class="line">        nextseed = (oldseed * multiplier + addend) &amp; mask;</span><br><span class="line">    <span class="comment">// 使用CAS，多线程下只能有一个线程更新为新种子，</span></span><br><span class="line">    <span class="comment">// 其他线程只能通过循环重新获取更新后的种子作为当前种子去计算新的种子</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!seed.compareAndSet(oldseed, nextseed));</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)(nextseed &gt;&gt;&gt; (<span class="number">48</span> - bits));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：Random的实例是线程安全的，内部使用了原子类和CAS确保多线程下安全，但由于原子变量的更新是CAS操作，同时只有一个线程成功，造成了大量线程进行自旋重试操作，从而降低了并发性能</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;java.util.Random的源码阅读&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;java.util.Random是Java的一个实用工具类库中的一个类，提供了产生各种类型随机数的方法&lt;/p&gt;
    
    </summary>
    
      <category term="java.util.*" scheme="http://yoursite.com/categories/java-util/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 拦截器</title>
    <link href="http://yoursite.com/2020/01/04/mybatis%20%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://yoursite.com/2020/01/04/mybatis 拦截器/</id>
    <published>2020-01-04T15:01:58.000Z</published>
    <updated>2020-01-06T15:52:53.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在学习MyBatis，学习到拦截器这块，并记录下来</p><h2 id="拦截器介绍"><a href="#拦截器介绍" class="headerlink" title="拦截器介绍"></a>拦截器介绍</h2><p>在某些业务场景下我们需要对sql进行拦截，达到不入侵原有代码下进行修改等操作，比如：分页，SQL执行时间，性能监控，数据过滤等等，在这里我们就可以用到MyBatis的Interceptor</p><a id="more"></a><p>首先自定义拦截器要实现Interceptor接口</p><p>先来个简单的一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Intercepts</span> 表明这个是个拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Signature</span> 表明要拦截的类，类里面的方法，方法里的参数</span></span><br><span class="line"><span class="comment"> * 这里要拦截的是Executor，Executor里面的update方法，方法的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Intercepts</span>(<span class="meta">@Signature</span>(type = Executor.class, method = <span class="string">"update"</span> ,args = &#123;MappedStatement.class, Object.class&#125;))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 业务逻辑....</span></span><br><span class="line">        <span class="comment">// 推进责任链前进，调用下一个拦截器拦截的方法 (责任链这里不做阐释)</span></span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Interceptor 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 拦截后的业务逻辑实现</span></span><br><span class="line">    <span class="function">Object <span class="title">intercept</span><span class="params">(Invocation var1)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">    <span class="comment">// 将当前拦截器到注册到拦截器链中</span></span><br><span class="line">    <span class="function">Object <span class="title">plugin</span><span class="params">(Object var1)</span></span>;</span><br><span class="line">    <span class="comment">// 设置自定义参数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>plugin方法在哪里被调用呢，往下看<br>下面的代码来自在org.apache.ibatis.session.Configuration类<br>作用是创建MyBatis的四大对象，可以看出方法里都调用了interceptorChain类中的pluginAll方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ParameterHandler <span class="title">newParameterHandler</span><span class="params">(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">    ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);</span><br><span class="line">    parameterHandler = (ParameterHandler)<span class="keyword">this</span>.interceptorChain.pluginAll(parameterHandler);</span><br><span class="line">    <span class="keyword">return</span> parameterHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultSetHandler <span class="title">newResultSetHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">    ResultSetHandler resultSetHandler = <span class="keyword">new</span> DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);</span><br><span class="line">    ResultSetHandler resultSetHandler = (ResultSetHandler)<span class="keyword">this</span>.interceptorChain.pluginAll(resultSetHandler);</span><br><span class="line">    <span class="keyword">return</span> resultSetHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StatementHandler <span class="title">newStatementHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">    StatementHandler statementHandler = <span class="keyword">new</span> RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);</span><br><span class="line">    StatementHandler statementHandler = (StatementHandler)<span class="keyword">this</span>.interceptorChain.pluginAll(statementHandler);</span><br><span class="line">    <span class="keyword">return</span> statementHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">newExecutor</span><span class="params">(Transaction transaction)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.newExecutor(transaction, <span class="keyword">this</span>.defaultExecutorType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> </span>&#123;</span><br><span class="line">    executorType = executorType == <span class="keyword">null</span> ? <span class="keyword">this</span>.defaultExecutorType : executorType;</span><br><span class="line">    executorType = executorType == <span class="keyword">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class="line">    Object executor;</span><br><span class="line">    <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> BatchExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> ReuseExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> SimpleExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cacheEnabled) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> CachingExecutor((Executor)executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Executor executor = (Executor)<span class="keyword">this</span>.interceptorChain.pluginAll(executor);</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interceptorChain里面保存着所有拦截器<br>在pluginAll方法里调用了plugin方法在这里被调用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorChain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pluginAll</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        Interceptor interceptor;</span><br><span class="line">        <span class="comment">// 每个拦截器都对目标对象进行代理，也就说明了拦截器只支持拦截四大对象</span></span><br><span class="line">        <span class="keyword">for</span>(Iterator var2 = <span class="keyword">this</span>.interceptors.iterator(); var2.hasNext(); target = interceptor.plugin(target)) &#123;</span><br><span class="line">            interceptor = (Interceptor)var2.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面讲完了MyBatis在哪调用了plugin方法，现在讲下怎么实现plugin方法。<br>MyBatis给我们提供了一个Plugin类用来实现我们的plugin方法，通过Plugin类的wrap()。首先通过@Intercepts@Signature注解来解析出我们需要拦截类，然后使用到了动态代理生成个代理对象返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">wrap</span><span class="params">(Object target, Interceptor interceptor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 解析拦截器注解</span></span><br><span class="line">    Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap = getSignatureMap(interceptor);</span><br><span class="line">    Class&lt;?&gt; type = target.getClass();</span><br><span class="line">    <span class="comment">// 获取目标类型实现的接口</span></span><br><span class="line">    Class&lt;?&gt;[] interfaces = getAllInterfaces(type, signatureMap);</span><br><span class="line">    <span class="comment">// 利用jdk代理生成一个代理类</span></span><br><span class="line">    <span class="keyword">return</span> interfaces.length &gt; <span class="number">0</span> ? Proxy.newProxyInstance(type.getClassLoader(), interfaces, <span class="keyword">new</span> Plugin(target, interceptor, signatureMap)) : target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在invoke方法里调用到自定义拦截器的interceptor方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Set&lt;Method&gt; methods = (Set)<span class="keyword">this</span>.signatureMap.get(method.getDeclaringClass());</span><br><span class="line">        <span class="comment">// 调用拦截器的interceptor方法</span></span><br><span class="line">        <span class="keyword">return</span> methods != <span class="keyword">null</span> &amp;&amp; methods.contains(method) ? <span class="keyword">this</span>.interceptor.intercept(<span class="keyword">new</span> Invocation(<span class="keyword">this</span>.target, method, args)) : method.invoke(<span class="keyword">this</span>.target, args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(var5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在学习MyBatis，学习到拦截器这块，并记录下来&lt;/p&gt;
&lt;h2 id=&quot;拦截器介绍&quot;&gt;&lt;a href=&quot;#拦截器介绍&quot; class=&quot;headerlink&quot; title=&quot;拦截器介绍&quot;&gt;&lt;/a&gt;拦截器介绍&lt;/h2&gt;&lt;p&gt;在某些业务场景下我们需要对sql进行拦截，达到不入侵原有代码下进行修改等操作，比如：分页，SQL执行时间，性能监控，数据过滤等等，在这里我们就可以用到MyBatis的Interceptor&lt;/p&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>LRU算法</title>
    <link href="http://yoursite.com/2019/09/24/LRU%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/24/LRU算法/</id>
    <published>2019-09-24T13:55:36.000Z</published>
    <updated>2020-01-05T06:52:36.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在学习Redis，其中用了淘汰算法，特学习下</p><h2 id="LRU介绍"><a href="#LRU介绍" class="headerlink" title="LRU介绍"></a>LRU介绍</h2><p>LRU是Least Recently Used的缩写，即最近最少使用，常用于页面置换算法，是为虚拟页式存储管理服务的。</p><p>核心：如果数据最近被访问过，那么将来访问的几率也更高</p><a id="more"></a><p><strong>利用LinkedHashMap实现</strong></p><p>1.利用LinkedHashMap中的构造方法</p><p>要完成LRU, accessOrder必须为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">float</span> loadFactor,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity, loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.accessOrder = accessOrder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.LinkedHashMap中的put方法</p><p>当accessOrder为true时，调用afterNodeAccess，将元素移动到尾部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder)</span><br><span class="line">        afterNodeAccess(e);</span><br><span class="line">    <span class="keyword">return</span> e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.LinkedHashMap中的afterNodeAccess方法</p><p>将元素移动到尾部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.after = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line">            a.before = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            last = b;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;(capacity, <span class="number">0.75F</span>, <span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">// 如果map里面的元素个数大于了缓存最大容量，则删除顶端元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;String, String&gt; eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; capacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">"1"</span>,<span class="string">"1"</span>);</span><br><span class="line">map.put(<span class="string">"2"</span>,<span class="string">"2"</span>);</span><br><span class="line">map.put(<span class="string">"3"</span>,<span class="string">"3"</span>);</span><br><span class="line">map.get(<span class="string">"1"</span>);</span><br><span class="line">map.get(<span class="string">"3"</span>);</span><br><span class="line">map.put(<span class="string">"4"</span>,<span class="string">"4"</span>);</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">      System.out.println(<span class="string">"key:"</span> + entry.getKey() + <span class="string">"   value:"</span> + entry.getValue());</span><br><span class="line"><span class="comment">// key:1   value:1</span></span><br><span class="line"><span class="comment">// key:3   value:3</span></span><br><span class="line"><span class="comment">// key:4   value:4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在学习Redis，其中用了淘汰算法，特学习下&lt;/p&gt;
&lt;h2 id=&quot;LRU介绍&quot;&gt;&lt;a href=&quot;#LRU介绍&quot; class=&quot;headerlink&quot; title=&quot;LRU介绍&quot;&gt;&lt;/a&gt;LRU介绍&lt;/h2&gt;&lt;p&gt;LRU是Least Recently Used的缩写，即最近最少使用，常用于页面置换算法，是为虚拟页式存储管理服务的。&lt;/p&gt;
&lt;p&gt;核心：如果数据最近被访问过，那么将来访问的几率也更高&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hbase 映射 Hive</title>
    <link href="http://yoursite.com/2019/06/30/Hbase-%E6%98%A0%E5%B0%84-Hive/"/>
    <id>http://yoursite.com/2019/06/30/Hbase-映射-Hive/</id>
    <published>2019-06-30T13:50:30.000Z</published>
    <updated>2020-01-05T06:52:47.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录下Hbase 映射 Hive的实现</p><a id="more"></a><ul><li><p>Hive内部表<br>  没被external关键字修饰，数据由Hive自身管理，hive drop掉此表时，hbase也被drop</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create TABLE person(</span><br><span class="line">       key string,</span><br><span class="line">       name string,</span><br><span class="line">       sex string</span><br><span class="line">)</span><br><span class="line">STORED BY <span class="string">'org.apache.hadoop.hive.hbase.HBaseStorageHandler'</span>   </span><br><span class="line">WITH SERDEPROPERTIES (<span class="string">"hbase.columns.mapping"</span> =<span class="string">":key,cf1:name,cf1:sex"</span>)   </span><br><span class="line">TBLPROPERTIES(<span class="string">"hbase.table.name"</span> = <span class="string">"hbase_person"</span>);</span><br></pre></td></tr></table></figure></li><li><p>Hive外部表<br> 被external关键字修饰，数据由HDFS管理，hive drop掉表，hbase表不会影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create EXTERNAL TABLE person(</span><br><span class="line">       key string,</span><br><span class="line">       name string,</span><br><span class="line">       sex string</span><br><span class="line">)</span><br><span class="line">STORED BY <span class="string">'org.apache.hadoop.hive.hbase.HBaseStorageHandler'</span>   </span><br><span class="line">WITH SERDEPROPERTIES (<span class="string">"hbase.columns.mapping"</span> =<span class="string">":key,cf1:name,cf1:sex"</span>)   </span><br><span class="line">TBLPROPERTIES(<span class="string">"hbase.table.name"</span> = <span class="string">"hbase_person"</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;记录下Hbase 映射 Hive的实现&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>记录 Hive 一些操作</title>
    <link href="http://yoursite.com/2019/06/30/%E8%AE%B0%E5%BD%95-Hive-%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/06/30/记录-Hive-一些操作/</id>
    <published>2019-06-30T13:30:56.000Z</published>
    <updated>2020-01-05T06:52:54.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前学习了Hive，特记录下一些常用操作</p><a id="more"></a><p><strong>1.创建</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数据库</span></span><br><span class="line">create database database_name</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建表 列按‘,’分割</span></span><br><span class="line">create table table_name(id int,name string) row format delimited fields terminated by <span class="string">','</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建分区表 列按‘,’分割 按bt和country分区</span></span><br><span class="line"><span class="comment">//create external table if not exists 判断表是否存在</span></span><br><span class="line">create external table <span class="keyword">if</span> not exists table_name(id int,name string)</span><br><span class="line">partitioned by (dt <span class="built_in">String</span>,country string)</span><br><span class="line">row format delimited fields terminated by <span class="string">','</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加分区</span></span><br><span class="line">alter table table_name add <span class="keyword">if</span> not exists partition (dt=<span class="string">'xxx'</span>,country </span><br><span class="line">=<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure><p><strong>2.查看</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有数据库</span></span><br><span class="line">show databases</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询所有表</span></span><br><span class="line">show tables</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看表结构</span></span><br><span class="line">desc formatted table_name</span><br></pre></td></tr></table></figure><p><a href="https://emmathe.com/2019/12/30/Hbase-映射-Hive/" target="_blank" rel="noopener">hbase映射表</a></p><p><strong>3.加载数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//local关键字 没有local关键字,则加载hdfs上的文件 有local关键字,则加载本地文件 </span></span><br><span class="line"><span class="comment">//overwrite关键字 覆盖数据(清空原数据)</span></span><br><span class="line"><span class="comment">//分区表，则加上partition分区</span></span><br><span class="line">load data [local] inpath <span class="string">'filepath'</span> [overwrite] into table table_name [partition(part=val,part2=val2)]</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载hdfs数据</span></span><br><span class="line">load data inpath <span class="string">'/hdfsPath'</span> into table table_name</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载本地数据</span></span><br><span class="line">load data load inpath <span class="string">'/path'</span> into table table_name</span><br></pre></td></tr></table></figure><p><strong>4.查询</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> table_name</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询分区表 where 后面加分区条件，这样做是不会扫描全表 只会查询该分区</span></span><br><span class="line">select * <span class="keyword">from</span> table_name where dt=<span class="string">'xxx'</span></span><br></pre></td></tr></table></figure><p><strong>5.删除，清空</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除数据库</span></span><br><span class="line">DROP DATABASE <span class="keyword">if</span> EXISTS table_name</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除表 </span></span><br><span class="line">DROP TABLE <span class="keyword">if</span> EXISTS table_name</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空分区表 表结构还在，只清空数据</span></span><br><span class="line">ALTER TABLE table_name DROP IF EXISTS PARTITION (dt=<span class="string">'2018-08'</span>,country=<span class="string">'CH'</span>)</span><br></pre></td></tr></table></figure><p><strong>6.重命名</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重命名表名</span></span><br><span class="line">ALTER TABLE table_name_old RENAME TO table_name_new</span><br><span class="line"></span><br><span class="line"><span class="comment">//重命名列名</span></span><br><span class="line">ALTER TABLE table_name CHANGE col_old_name col_new_name STRING;</span><br></pre></td></tr></table></figure><p><strong>7.导出文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出文件到hdfs上 按照‘,’分割 </span></span><br><span class="line"><span class="comment">//overwrite关键字 会覆盖目录下的原数据</span></span><br><span class="line">INSERT OVERWRITE directory <span class="string">'/hdfsPath'</span> row format delimited fields terminated by <span class="string">','</span>  SELECT * <span class="keyword">from</span> table_name</span><br></pre></td></tr></table></figure><p><strong>8.无效ID在关联时的数据倾斜问题</strong></p><ul><li>解决方法：函数过滤 null</li></ul><p>把空值的id变成一个字符串加上随机数，就能把倾斜的数据分到不同的Reduce上，从而解决数据倾斜问题。因为空值不参与关联，即使分到不同 的 Reduce 上，也不会影响最终的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tableName1 a LEFT OUTER </span><br><span class="line">JOIN tableName2 b ON </span><br><span class="line">CASE WHEN a.id IS NULL THEN CONCAT(<span class="string">'hive_temp_id'</span>,RAND()) ELSE a.id END =b.user_id;</span><br></pre></td></tr></table></figure><p><strong>9.Hive不允许直接访问非group by字段</strong></p><ul><li>对于非group by字段，可以使用collect_set函数收集这些字段，返回一个数组；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT a,b FROM tableName GROUP BY a<span class="comment">//Expression not in GROUP BY key 'b'</span></span><br><span class="line"></span><br><span class="line">SELECT a,collect_set(b) FROM tableName GROUP BY a<span class="comment">//正确的使用方式</span></span><br></pre></td></tr></table></figure><ul><li>collect_set函数的其他用法：</li></ul><p>使用数字下标，可以直接访问数组中的元素</p><p><strong>10.控制map和reduce数量</strong></p><ul><li><p>控制map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> mapred.max.split.size=256000000;   //每个Map处理的最大输入文件大小(256MB)</span><br><span class="line"><span class="keyword">set</span> mapred.min.split.size.per.node=1;  //节点上split文件的最小值</span><br><span class="line"><span class="keyword">set</span> mapred.min.split.size.per.rack=1;  //机架上split文件的最小值</span><br></pre></td></tr></table></figure></li><li><p>控制reduce</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">set</span> mapred.reduce.tasks=10;  //设置reduce的数量</span><br><span class="line">//方法二</span><br><span class="line"><span class="keyword">set</span> hive.exec.reducers.bytes.per.reducer=1073741824 //每个reduce处理的数据量,默认1GB</span><br></pre></td></tr></table></figure></li></ul><p><strong>10.hive join 优化的方式</strong></p><ul><li>map join<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.auto.convert.join=true //自动MAPJOIN转换操作（common join转换为map join</span><br></pre></td></tr></table></figure></li></ul><p><strong>12.合并小文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive.merge.mapfiles = <span class="literal">true</span><span class="comment">//和并 Map 输出文件，默认为 True</span></span><br><span class="line">hive.merge.mapredfiles = <span class="literal">false</span> <span class="comment">//合并 Reduce 输出文件，默认为 False</span></span><br><span class="line">hive.merge.size.per.task = <span class="number">256</span>*<span class="number">1000</span>*<span class="number">1000</span> <span class="comment">//合并文件的大小。</span></span><br></pre></td></tr></table></figure><p><strong>13.并行执行优化</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.exec.parallel=true; //开启任务并行执行</span><br><span class="line"><span class="keyword">set</span> hive.exec.parallel.thread.number=8; //同一个sql允许并行任务的最大线程数</span><br><span class="line"><span class="keyword">set</span> hive.groupby.skewindata=true; //设置数据负载均衡，防止数据倾斜</span><br><span class="line"><span class="keyword">set</span> hive.ignore.mapjoin.hint=false;//不忽略MAPJOIN标记</span><br><span class="line"><span class="keyword">set</span> mapred.reduce.tasks=15;//设置reduce的数量</span><br><span class="line"><span class="keyword">set</span> hive.exec.reducers.max=200;//reduce最大数量(默认999)</span><br><span class="line"><span class="keyword">set</span> hive.auto.convert.join=false;//自动MAPJOIN转换操作（common join转换为map join）</span><br><span class="line"><span class="keyword">set</span> hive.exec.compress.intermediate=true; //hive的压缩设置，中间结果压缩  </span><br><span class="line"><span class="keyword">set</span> hive.map.aggr = true;//map中做部分聚集操作(默认true)</span><br><span class="line"><span class="keyword">set</span> hive.execution.engine=tez;//更改hive底层执行的计算框架</span><br></pre></td></tr></table></figure><p>填坑中</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前学习了Hive，特记录下一些常用操作&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
</feed>
