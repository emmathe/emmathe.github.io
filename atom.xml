<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>amy acker blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-08T15:28:12.382Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>amy acker</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 内存区域</title>
    <link href="http://yoursite.com/2020/01/07/Java%20%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
    <id>http://yoursite.com/2020/01/07/Java 内存区域/</id>
    <published>2020-01-07T15:01:58.000Z</published>
    <updated>2020-01-08T15:28:12.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，根据《Java虚拟机规范》的规定，Java虚拟机所管理的内存将包括以下几个运行时数据区域。</p><a id="more"></a><h2 id="1丶程序计数器"><a href="#1丶程序计数器" class="headerlink" title="1丶程序计数器"></a>1丶程序计数器</h2><p>程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支丶循环丶跳转丶异常处理丶线程恢复等基础功能都需要依赖计数器来完成。</p><p>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何时刻，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立地程序计数器，各条线程之间计数器互不影响，独立储存，所以这块内存区域是线程私有的。</p><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器的值则为空。此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p><h2 id="2丶Java虚拟机栈"><a href="#2丶Java虚拟机栈" class="headerlink" title="2丶Java虚拟机栈"></a>2丶Java虚拟机栈</h2><p>和程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同。它描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于存储局部变量表丶操作数栈丶动态链接丶方法出口等信息。每个方法从调用到执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p>局部变量表存放了编译器可知的各种基本数据类型丶对象引用（reference类型）和returnAddress类型</p><p>其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p><p>该区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p><h2 id="3丶本地方法栈"><a href="#3丶本地方法栈" class="headerlink" title="3丶本地方法栈"></a>3丶本地方法栈</h2><p>本地方法栈与虚拟机栈所发挥的作用是非常相似的，它们之间的区别是虚拟机栈为虚拟机执行Java方法（字节码）服务，而本地方法栈则为虚拟机执行使用到的Native方法服务，和虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。</p><h2 id="4丶Java堆"><a href="#4丶Java堆" class="headerlink" title="4丶Java堆"></a>4丶Java堆</h2><p>Java堆是Java虚拟机所管理的内存中最大的一块。Java堆是线程共享的内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p><p>Java堆是垃圾收集器管理的主要区域，从内存回收的角度来看，由于现在收集器基本都是采用分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致点有Eden（伊甸园）空间丶From Survivor空间丶To Survivor空间等。从内存分配的角度来看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区，无论怎么划分，存储的都是对象实例，划分的目的是为了更好地回收内存，或者更快的分配内存。</p><p>Java虚拟机规范的规定中，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。如果在堆中没有内存完成实例分配，并且堆无法在扩展时，就会抛出OutOfMemoryError异常。</p><h2 id="5丶方法区"><a href="#5丶方法区" class="headerlink" title="5丶方法区"></a>5丶方法区</h2><p>方法去与Java堆一样，是线程共享的内存区域，它用于存储已被虚拟机加载的类信息丶常量丶静态变量丶即时编译器后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</p><p>由于早期HotSpot JVM的把GC分代收集扩展至方法区，因此很多人将方法去称为“永久代”。</p><p>Java虚拟机规范对方法区的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在。这区域的内存回收目标主要是针对常量池的回收和对类型的卸载，虽然回收的成绩难以令人满意，类型的卸载，条件相当苛刻，但是这部分区域的回收确实的必要的。</p><p>Java虚拟机规范的规定中，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</p><h2 id="6丶运行时常量池"><a href="#6丶运行时常量池" class="headerlink" title="6丶运行时常量池"></a>6丶运行时常量池</h2><p>运行时常量池是方法区的一部分。Class文件中除了有类的版本丶字段丶方法丶接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p><p>Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中。（如String类的intern()方法）。</p><p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法在申请到内存时会抛出OutOfMemoryError异常。</p><h2 id="7丶直接内存"><a href="#7丶直接内存" class="headerlink" title="7丶直接内存"></a>7丶直接内存</h2><p>直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。但是这部分内存也被频繁使用，而且也可能导致OutOfMemoryError异常。</p><p>在JDK 1.4中新加入了NIO类，引入了一种基于通道与缓冲区的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p><p>显然，本机直接内存的分配不会受到Java堆大小的限制，但是。既然是内存，肯定还是会受到本机总内存的限制。。在配置虚拟机参数时，会根据实际内存设置-Xmx等参数，如果忽略直接内存的话，使得各个内存区域总和大于物理内存限制，从而导致动态扩展时出现OutOfMemoryError异常。</p><p>参考文献：《Java虚拟机规范》丶《深入理解Java虚拟机》</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，根据《Java虚拟机规范》的规定，Java虚拟机所管理的内存将包括以下几个运行时数据区域。&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>java.util.Random的源码阅读</title>
    <link href="http://yoursite.com/2020/01/06/java.util.Random%E7%9A%84%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://yoursite.com/2020/01/06/java.util.Random的源码阅读/</id>
    <published>2020-01-06T15:01:58.000Z</published>
    <updated>2020-01-06T16:41:11.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>java.util.Random的源码阅读</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>java.util.Random是Java的一个实用工具类库中的一个类，提供了产生各种类型随机数的方法</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Random</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 生成种子 seedUniquifier方法和System.nanoTime()时间进行 异或运算</span></span><br><span class="line">    <span class="keyword">this</span>(seedUniquifier() ^ System.nanoTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始的种子</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong seedUniquifier = <span class="keyword">new</span> AtomicLong(<span class="number">8682522807148012L</span>);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">seedUniquifier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 多线程可以会赋值失败，所以使用for循环</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 当前预期值</span></span><br><span class="line">        <span class="keyword">long</span> current = seedUniquifier.get();</span><br><span class="line">        <span class="comment">// 要更新的值</span></span><br><span class="line">        <span class="keyword">long</span> next = current * <span class="number">181783497276652981L</span>;</span><br><span class="line">        <span class="comment">// 使用CAS操作更新seedUniquifier</span></span><br><span class="line">        <span class="keyword">if</span> (seedUniquifier.compareAndSet(current, next))</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicLong seed;</span><br><span class="line"><span class="comment">// 有参构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Random</span><span class="params">(<span class="keyword">long</span> seed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getClass() == Random.class)</span><br><span class="line">        <span class="keyword">this</span>.seed = <span class="keyword">new</span> AtomicLong(initialScramble(seed));</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 子类可以重写setSeed()方法 </span></span><br><span class="line">        <span class="keyword">this</span>.seed = <span class="keyword">new</span> AtomicLong();</span><br><span class="line">        setSeed(seed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> multiplier = <span class="number">0x5DEECE66DL</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> mask = (<span class="number">1L</span> &lt;&lt; <span class="number">48</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把用户设置的种子进行运算 返回long</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">initialScramble</span><span class="params">(<span class="keyword">long</span> seed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (seed ^ multiplier) &amp; mask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeed</span><span class="params">(<span class="keyword">long</span> seed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.seed.set(initialScramble(seed));</span><br><span class="line">    haveNextNextGaussian = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">(<span class="keyword">int</span> bound)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断 bound</span></span><br><span class="line">    <span class="keyword">if</span> (bound &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(BadBound);</span><br><span class="line">    <span class="comment">// 根据旧种子生成新种子</span></span><br><span class="line">    <span class="keyword">int</span> r = next(<span class="number">31</span>);</span><br><span class="line">    <span class="comment">// 下面这些代码都是根据新种子计算随机数</span></span><br><span class="line">    <span class="keyword">int</span> m = bound - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ((bound &amp; m) == <span class="number">0</span>) </span><br><span class="line">        r = (<span class="keyword">int</span>)((bound * (<span class="keyword">long</span>)r) &gt;&gt; <span class="number">31</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = r;</span><br><span class="line">            u - (r = u % bound) + m &lt; <span class="number">0</span>;</span><br><span class="line">            u = next(<span class="number">31</span>))</span><br><span class="line">            ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> bits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> oldseed, nextseed;</span><br><span class="line">    AtomicLong seed = <span class="keyword">this</span>.seed;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 获取旧种子</span></span><br><span class="line">        oldseed = seed.get();</span><br><span class="line">        <span class="comment">// 用旧种子去生成新种子</span></span><br><span class="line">        nextseed = (oldseed * multiplier + addend) &amp; mask;</span><br><span class="line">    <span class="comment">// 使用CAS，多线程下只能有一个线程更新为新种子，</span></span><br><span class="line">    <span class="comment">// 其他线程只能通过循环重新获取更新后的种子作为当前种子去计算新的种子</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!seed.compareAndSet(oldseed, nextseed));</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)(nextseed &gt;&gt;&gt; (<span class="number">48</span> - bits));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：Random的实例是线程安全的，内部使用了原子类和CAS确保多线程下安全，但由于原子变量的更新是CAS操作，同时只有一个线程成功，造成了大量线程进行自旋重试操作，从而降低了并发性能</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;java.util.Random的源码阅读&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;java.util.Random是Java的一个实用工具类库中的一个类，提供了产生各种类型随机数的方法&lt;/p&gt;
    
    </summary>
    
      <category term="java.util.*" scheme="http://yoursite.com/categories/java-util/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 拦截器</title>
    <link href="http://yoursite.com/2020/01/04/mybatis%20%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://yoursite.com/2020/01/04/mybatis 拦截器/</id>
    <published>2020-01-04T15:01:58.000Z</published>
    <updated>2020-01-06T15:52:53.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在学习MyBatis，学习到拦截器这块，并记录下来</p><h2 id="拦截器介绍"><a href="#拦截器介绍" class="headerlink" title="拦截器介绍"></a>拦截器介绍</h2><p>在某些业务场景下我们需要对sql进行拦截，达到不入侵原有代码下进行修改等操作，比如：分页，SQL执行时间，性能监控，数据过滤等等，在这里我们就可以用到MyBatis的Interceptor</p><a id="more"></a><p>首先自定义拦截器要实现Interceptor接口</p><p>先来个简单的一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Intercepts</span> 表明这个是个拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Signature</span> 表明要拦截的类，类里面的方法，方法里的参数</span></span><br><span class="line"><span class="comment"> * 这里要拦截的是Executor，Executor里面的update方法，方法的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Intercepts</span>(<span class="meta">@Signature</span>(type = Executor.class, method = <span class="string">"update"</span> ,args = &#123;MappedStatement.class, Object.class&#125;))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 业务逻辑....</span></span><br><span class="line">        <span class="comment">// 推进责任链前进，调用下一个拦截器拦截的方法 (责任链这里不做阐释)</span></span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Interceptor 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 拦截后的业务逻辑实现</span></span><br><span class="line">    <span class="function">Object <span class="title">intercept</span><span class="params">(Invocation var1)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">    <span class="comment">// 将当前拦截器到注册到拦截器链中</span></span><br><span class="line">    <span class="function">Object <span class="title">plugin</span><span class="params">(Object var1)</span></span>;</span><br><span class="line">    <span class="comment">// 设置自定义参数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>plugin方法在哪里被调用呢，往下看<br>下面的代码来自在org.apache.ibatis.session.Configuration类<br>作用是创建MyBatis的四大对象，可以看出方法里都调用了interceptorChain类中的pluginAll方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ParameterHandler <span class="title">newParameterHandler</span><span class="params">(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">    ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);</span><br><span class="line">    parameterHandler = (ParameterHandler)<span class="keyword">this</span>.interceptorChain.pluginAll(parameterHandler);</span><br><span class="line">    <span class="keyword">return</span> parameterHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultSetHandler <span class="title">newResultSetHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">    ResultSetHandler resultSetHandler = <span class="keyword">new</span> DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);</span><br><span class="line">    ResultSetHandler resultSetHandler = (ResultSetHandler)<span class="keyword">this</span>.interceptorChain.pluginAll(resultSetHandler);</span><br><span class="line">    <span class="keyword">return</span> resultSetHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StatementHandler <span class="title">newStatementHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">    StatementHandler statementHandler = <span class="keyword">new</span> RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);</span><br><span class="line">    StatementHandler statementHandler = (StatementHandler)<span class="keyword">this</span>.interceptorChain.pluginAll(statementHandler);</span><br><span class="line">    <span class="keyword">return</span> statementHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">newExecutor</span><span class="params">(Transaction transaction)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.newExecutor(transaction, <span class="keyword">this</span>.defaultExecutorType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> </span>&#123;</span><br><span class="line">    executorType = executorType == <span class="keyword">null</span> ? <span class="keyword">this</span>.defaultExecutorType : executorType;</span><br><span class="line">    executorType = executorType == <span class="keyword">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class="line">    Object executor;</span><br><span class="line">    <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> BatchExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> ReuseExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> SimpleExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cacheEnabled) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> CachingExecutor((Executor)executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Executor executor = (Executor)<span class="keyword">this</span>.interceptorChain.pluginAll(executor);</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interceptorChain里面保存着所有拦截器<br>在pluginAll方法里调用了plugin方法在这里被调用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorChain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pluginAll</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        Interceptor interceptor;</span><br><span class="line">        <span class="comment">// 每个拦截器都对目标对象进行代理，也就说明了拦截器只支持拦截四大对象</span></span><br><span class="line">        <span class="keyword">for</span>(Iterator var2 = <span class="keyword">this</span>.interceptors.iterator(); var2.hasNext(); target = interceptor.plugin(target)) &#123;</span><br><span class="line">            interceptor = (Interceptor)var2.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面讲完了MyBatis在哪调用了plugin方法，现在讲下怎么实现plugin方法。<br>MyBatis给我们提供了一个Plugin类用来实现我们的plugin方法，通过Plugin类的wrap()。首先通过@Intercepts@Signature注解来解析出我们需要拦截类，然后使用到了动态代理生成个代理对象返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">wrap</span><span class="params">(Object target, Interceptor interceptor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 解析拦截器注解</span></span><br><span class="line">    Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap = getSignatureMap(interceptor);</span><br><span class="line">    Class&lt;?&gt; type = target.getClass();</span><br><span class="line">    <span class="comment">// 获取目标类型实现的接口</span></span><br><span class="line">    Class&lt;?&gt;[] interfaces = getAllInterfaces(type, signatureMap);</span><br><span class="line">    <span class="comment">// 利用jdk代理生成一个代理类</span></span><br><span class="line">    <span class="keyword">return</span> interfaces.length &gt; <span class="number">0</span> ? Proxy.newProxyInstance(type.getClassLoader(), interfaces, <span class="keyword">new</span> Plugin(target, interceptor, signatureMap)) : target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在invoke方法里调用到自定义拦截器的interceptor方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Set&lt;Method&gt; methods = (Set)<span class="keyword">this</span>.signatureMap.get(method.getDeclaringClass());</span><br><span class="line">        <span class="comment">// 调用拦截器的interceptor方法</span></span><br><span class="line">        <span class="keyword">return</span> methods != <span class="keyword">null</span> &amp;&amp; methods.contains(method) ? <span class="keyword">this</span>.interceptor.intercept(<span class="keyword">new</span> Invocation(<span class="keyword">this</span>.target, method, args)) : method.invoke(<span class="keyword">this</span>.target, args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(var5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在学习MyBatis，学习到拦截器这块，并记录下来&lt;/p&gt;
&lt;h2 id=&quot;拦截器介绍&quot;&gt;&lt;a href=&quot;#拦截器介绍&quot; class=&quot;headerlink&quot; title=&quot;拦截器介绍&quot;&gt;&lt;/a&gt;拦截器介绍&lt;/h2&gt;&lt;p&gt;在某些业务场景下我们需要对sql进行拦截，达到不入侵原有代码下进行修改等操作，比如：分页，SQL执行时间，性能监控，数据过滤等等，在这里我们就可以用到MyBatis的Interceptor&lt;/p&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>LRU算法</title>
    <link href="http://yoursite.com/2019/09/24/LRU%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/24/LRU算法/</id>
    <published>2019-09-24T13:55:36.000Z</published>
    <updated>2020-01-05T06:52:36.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在学习Redis，其中用了淘汰算法，特学习下</p><h2 id="LRU介绍"><a href="#LRU介绍" class="headerlink" title="LRU介绍"></a>LRU介绍</h2><p>LRU是Least Recently Used的缩写，即最近最少使用，常用于页面置换算法，是为虚拟页式存储管理服务的。</p><p>核心：如果数据最近被访问过，那么将来访问的几率也更高</p><a id="more"></a><p><strong>利用LinkedHashMap实现</strong></p><p>1.利用LinkedHashMap中的构造方法</p><p>要完成LRU, accessOrder必须为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">float</span> loadFactor,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity, loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.accessOrder = accessOrder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.LinkedHashMap中的put方法</p><p>当accessOrder为true时，调用afterNodeAccess，将元素移动到尾部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder)</span><br><span class="line">        afterNodeAccess(e);</span><br><span class="line">    <span class="keyword">return</span> e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.LinkedHashMap中的afterNodeAccess方法</p><p>将元素移动到尾部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.after = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line">            a.before = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            last = b;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;(capacity, <span class="number">0.75F</span>, <span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">// 如果map里面的元素个数大于了缓存最大容量，则删除顶端元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;String, String&gt; eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; capacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">"1"</span>,<span class="string">"1"</span>);</span><br><span class="line">map.put(<span class="string">"2"</span>,<span class="string">"2"</span>);</span><br><span class="line">map.put(<span class="string">"3"</span>,<span class="string">"3"</span>);</span><br><span class="line">map.get(<span class="string">"1"</span>);</span><br><span class="line">map.get(<span class="string">"3"</span>);</span><br><span class="line">map.put(<span class="string">"4"</span>,<span class="string">"4"</span>);</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">      System.out.println(<span class="string">"key:"</span> + entry.getKey() + <span class="string">"   value:"</span> + entry.getValue());</span><br><span class="line"><span class="comment">// key:1   value:1</span></span><br><span class="line"><span class="comment">// key:3   value:3</span></span><br><span class="line"><span class="comment">// key:4   value:4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在学习Redis，其中用了淘汰算法，特学习下&lt;/p&gt;
&lt;h2 id=&quot;LRU介绍&quot;&gt;&lt;a href=&quot;#LRU介绍&quot; class=&quot;headerlink&quot; title=&quot;LRU介绍&quot;&gt;&lt;/a&gt;LRU介绍&lt;/h2&gt;&lt;p&gt;LRU是Least Recently Used的缩写，即最近最少使用，常用于页面置换算法，是为虚拟页式存储管理服务的。&lt;/p&gt;
&lt;p&gt;核心：如果数据最近被访问过，那么将来访问的几率也更高&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hbase 映射 Hive</title>
    <link href="http://yoursite.com/2019/06/30/Hbase-%E6%98%A0%E5%B0%84-Hive/"/>
    <id>http://yoursite.com/2019/06/30/Hbase-映射-Hive/</id>
    <published>2019-06-30T13:50:30.000Z</published>
    <updated>2020-01-05T06:52:47.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录下Hbase 映射 Hive的实现</p><a id="more"></a><ul><li><p>Hive内部表<br>  没被external关键字修饰，数据由Hive自身管理，hive drop掉此表时，hbase也被drop</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create TABLE person(</span><br><span class="line">       key string,</span><br><span class="line">       name string,</span><br><span class="line">       sex string</span><br><span class="line">)</span><br><span class="line">STORED BY <span class="string">'org.apache.hadoop.hive.hbase.HBaseStorageHandler'</span>   </span><br><span class="line">WITH SERDEPROPERTIES (<span class="string">"hbase.columns.mapping"</span> =<span class="string">":key,cf1:name,cf1:sex"</span>)   </span><br><span class="line">TBLPROPERTIES(<span class="string">"hbase.table.name"</span> = <span class="string">"hbase_person"</span>);</span><br></pre></td></tr></table></figure></li><li><p>Hive外部表<br> 被external关键字修饰，数据由HDFS管理，hive drop掉表，hbase表不会影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create EXTERNAL TABLE person(</span><br><span class="line">       key string,</span><br><span class="line">       name string,</span><br><span class="line">       sex string</span><br><span class="line">)</span><br><span class="line">STORED BY <span class="string">'org.apache.hadoop.hive.hbase.HBaseStorageHandler'</span>   </span><br><span class="line">WITH SERDEPROPERTIES (<span class="string">"hbase.columns.mapping"</span> =<span class="string">":key,cf1:name,cf1:sex"</span>)   </span><br><span class="line">TBLPROPERTIES(<span class="string">"hbase.table.name"</span> = <span class="string">"hbase_person"</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;记录下Hbase 映射 Hive的实现&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>记录 Hive 一些操作</title>
    <link href="http://yoursite.com/2019/06/30/%E8%AE%B0%E5%BD%95-Hive-%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/06/30/记录-Hive-一些操作/</id>
    <published>2019-06-30T13:30:56.000Z</published>
    <updated>2020-01-05T06:52:54.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前学习了Hive，特记录下一些常用操作</p><a id="more"></a><p><strong>1.创建</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数据库</span></span><br><span class="line">create database database_name</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建表 列按‘,’分割</span></span><br><span class="line">create table table_name(id int,name string) row format delimited fields terminated by <span class="string">','</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建分区表 列按‘,’分割 按bt和country分区</span></span><br><span class="line"><span class="comment">//create external table if not exists 判断表是否存在</span></span><br><span class="line">create external table <span class="keyword">if</span> not exists table_name(id int,name string)</span><br><span class="line">partitioned by (dt <span class="built_in">String</span>,country string)</span><br><span class="line">row format delimited fields terminated by <span class="string">','</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加分区</span></span><br><span class="line">alter table table_name add <span class="keyword">if</span> not exists partition (dt=<span class="string">'xxx'</span>,country </span><br><span class="line">=<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure><p><strong>2.查看</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有数据库</span></span><br><span class="line">show databases</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询所有表</span></span><br><span class="line">show tables</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看表结构</span></span><br><span class="line">desc formatted table_name</span><br></pre></td></tr></table></figure><p><a href="https://emmathe.com/2019/12/30/Hbase-映射-Hive/" target="_blank" rel="noopener">hbase映射表</a></p><p><strong>3.加载数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//local关键字 没有local关键字,则加载hdfs上的文件 有local关键字,则加载本地文件 </span></span><br><span class="line"><span class="comment">//overwrite关键字 覆盖数据(清空原数据)</span></span><br><span class="line"><span class="comment">//分区表，则加上partition分区</span></span><br><span class="line">load data [local] inpath <span class="string">'filepath'</span> [overwrite] into table table_name [partition(part=val,part2=val2)]</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载hdfs数据</span></span><br><span class="line">load data inpath <span class="string">'/hdfsPath'</span> into table table_name</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载本地数据</span></span><br><span class="line">load data load inpath <span class="string">'/path'</span> into table table_name</span><br></pre></td></tr></table></figure><p><strong>4.查询</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> table_name</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询分区表 where 后面加分区条件，这样做是不会扫描全表 只会查询该分区</span></span><br><span class="line">select * <span class="keyword">from</span> table_name where dt=<span class="string">'xxx'</span></span><br></pre></td></tr></table></figure><p><strong>5.删除，清空</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除数据库</span></span><br><span class="line">DROP DATABASE <span class="keyword">if</span> EXISTS table_name</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除表 </span></span><br><span class="line">DROP TABLE <span class="keyword">if</span> EXISTS table_name</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空分区表 表结构还在，只清空数据</span></span><br><span class="line">ALTER TABLE table_name DROP IF EXISTS PARTITION (dt=<span class="string">'2018-08'</span>,country=<span class="string">'CH'</span>)</span><br></pre></td></tr></table></figure><p><strong>6.重命名</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重命名表名</span></span><br><span class="line">ALTER TABLE table_name_old RENAME TO table_name_new</span><br><span class="line"></span><br><span class="line"><span class="comment">//重命名列名</span></span><br><span class="line">ALTER TABLE table_name CHANGE col_old_name col_new_name STRING;</span><br></pre></td></tr></table></figure><p><strong>7.导出文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出文件到hdfs上 按照‘,’分割 </span></span><br><span class="line"><span class="comment">//overwrite关键字 会覆盖目录下的原数据</span></span><br><span class="line">INSERT OVERWRITE directory <span class="string">'/hdfsPath'</span> row format delimited fields terminated by <span class="string">','</span>  SELECT * <span class="keyword">from</span> table_name</span><br></pre></td></tr></table></figure><p><strong>8.无效ID在关联时的数据倾斜问题</strong></p><ul><li>解决方法：函数过滤 null</li></ul><p>把空值的id变成一个字符串加上随机数，就能把倾斜的数据分到不同的Reduce上，从而解决数据倾斜问题。因为空值不参与关联，即使分到不同 的 Reduce 上，也不会影响最终的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tableName1 a LEFT OUTER </span><br><span class="line">JOIN tableName2 b ON </span><br><span class="line">CASE WHEN a.id IS NULL THEN CONCAT(<span class="string">'hive_temp_id'</span>,RAND()) ELSE a.id END =b.user_id;</span><br></pre></td></tr></table></figure><p><strong>9.Hive不允许直接访问非group by字段</strong></p><ul><li>对于非group by字段，可以使用collect_set函数收集这些字段，返回一个数组；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT a,b FROM tableName GROUP BY a<span class="comment">//Expression not in GROUP BY key 'b'</span></span><br><span class="line"></span><br><span class="line">SELECT a,collect_set(b) FROM tableName GROUP BY a<span class="comment">//正确的使用方式</span></span><br></pre></td></tr></table></figure><ul><li>collect_set函数的其他用法：</li></ul><p>使用数字下标，可以直接访问数组中的元素</p><p><strong>10.控制map和reduce数量</strong></p><ul><li><p>控制map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> mapred.max.split.size=256000000;   //每个Map处理的最大输入文件大小(256MB)</span><br><span class="line"><span class="keyword">set</span> mapred.min.split.size.per.node=1;  //节点上split文件的最小值</span><br><span class="line"><span class="keyword">set</span> mapred.min.split.size.per.rack=1;  //机架上split文件的最小值</span><br></pre></td></tr></table></figure></li><li><p>控制reduce</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">set</span> mapred.reduce.tasks=10;  //设置reduce的数量</span><br><span class="line">//方法二</span><br><span class="line"><span class="keyword">set</span> hive.exec.reducers.bytes.per.reducer=1073741824 //每个reduce处理的数据量,默认1GB</span><br></pre></td></tr></table></figure></li></ul><p><strong>10.hive join 优化的方式</strong></p><ul><li>map join<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.auto.convert.join=true //自动MAPJOIN转换操作（common join转换为map join</span><br></pre></td></tr></table></figure></li></ul><p><strong>12.合并小文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive.merge.mapfiles = <span class="literal">true</span><span class="comment">//和并 Map 输出文件，默认为 True</span></span><br><span class="line">hive.merge.mapredfiles = <span class="literal">false</span> <span class="comment">//合并 Reduce 输出文件，默认为 False</span></span><br><span class="line">hive.merge.size.per.task = <span class="number">256</span>*<span class="number">1000</span>*<span class="number">1000</span> <span class="comment">//合并文件的大小。</span></span><br></pre></td></tr></table></figure><p><strong>13.并行执行优化</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.exec.parallel=true; //开启任务并行执行</span><br><span class="line"><span class="keyword">set</span> hive.exec.parallel.thread.number=8; //同一个sql允许并行任务的最大线程数</span><br><span class="line"><span class="keyword">set</span> hive.groupby.skewindata=true; //设置数据负载均衡，防止数据倾斜</span><br><span class="line"><span class="keyword">set</span> hive.ignore.mapjoin.hint=false;//不忽略MAPJOIN标记</span><br><span class="line"><span class="keyword">set</span> mapred.reduce.tasks=15;//设置reduce的数量</span><br><span class="line"><span class="keyword">set</span> hive.exec.reducers.max=200;//reduce最大数量(默认999)</span><br><span class="line"><span class="keyword">set</span> hive.auto.convert.join=false;//自动MAPJOIN转换操作（common join转换为map join）</span><br><span class="line"><span class="keyword">set</span> hive.exec.compress.intermediate=true; //hive的压缩设置，中间结果压缩  </span><br><span class="line"><span class="keyword">set</span> hive.map.aggr = true;//map中做部分聚集操作(默认true)</span><br><span class="line"><span class="keyword">set</span> hive.execution.engine=tez;//更改hive底层执行的计算框架</span><br></pre></td></tr></table></figure><p>填坑中</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前学习了Hive，特记录下一些常用操作&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
</feed>
